version: '3.8'

# Common services that can be shared across different applications
services:
  # Redis for message queuing and caching
  redis:
    image: redis:7-alpine
    container_name: ${REDIS_CONTAINER_NAME:-common_redis}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    env_file:
      - ./env/${PROFILE:-dev}.env
    volumes:
      - ./app_data/redis_data:/data:rw
      - ./scripts/redis-entrypoint.sh:/redis-entrypoint.sh:ro
    command: sh /redis-entrypoint.sh
    healthcheck:
      test: 
        - CMD
        - sh
        - -c
        - 'redis-cli --no-auth-warning -a "$REDIS_PASSWORD" ping'
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - common_network


  # ChromaDB for vector storage
  chromadb:
    image: chromadb/chroma:${CHROMA_VERSION:-latest}
    container_name: ${CHROMA_CONTAINER_NAME:-common_chromadb}
    ports:
      - "${CHROMA_PORT:-8000}:8000"
    volumes:
      - ./app_data/chroma_db_data:/chroma/chroma:rw
    env_file:
      - ./env/${PROFILE:-dev}.env
    environment:
      - CHROMA_HOST=0.0.0.0
      - CHROMA_PORT=8000
      - PERSIST_DIRECTORY=/chroma/chroma
      - CHROMA_AUTH_PROVIDER=${CHROMA_AUTH_PROVIDER:-}
      - CHROMA_SERVER_AUTHN_CREDENTIALS=${CHROMA_SERVER_AUTHN_CREDENTIALS:-}
      - CHROMA_SERVER_AUTHN_PROVIDER=${CHROMA_SERVER_AUTHN_PROVIDER:-}
    healthcheck:
      test:
        - CMD
        - sh
        - -c
        - |
          if command -v curl >/dev/null 2>&1; then
            curl -f -s http://localhost:8000/api/v2/heartbeat > /dev/null
          else
            # Install curl if nothing else is available
            apk add --no-cache curl > /dev/null 2>&1 || apt-get update && apt-get install -y curl > /dev/null 2>&1
            curl -f -s http://localhost:8000/api/v2/heartbeat > /dev/null
          fi
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - common_network


  # MongoDB - only for development and staging
  mongodb:
    image: mongo:${MONGODB_VERSION:-6.0}
    container_name: ${MONGODB_CONTAINER_NAME:-common_mongodb}
    env_file:
      - ./env/${PROFILE:-dev}.env
    ports:
      - "${MONGODB_PORT:-27017}:27017"
    volumes:
      - ./app_data/mongodb_data:/data/db:rw
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - common_network

  # Elasticsearch for BM25 search and chunk storage
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTICSEARCH_VERSION:-8.11.0}
    container_name: ${ELASTICSEARCH_CONTAINER_NAME:-common_elasticsearch}
    environment:
      - node.name=elasticsearch
      - cluster.name=rag-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms${ELASTICSEARCH_HEAP_SIZE:-512m} -Xmx${ELASTICSEARCH_HEAP_SIZE:-512m}"
      - xpack.security.enabled=${ELASTICSEARCH_SECURITY_ENABLED:-false}
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD:-}
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - ./app_data/elasticsearch_data:/usr/share/elasticsearch/data:rw
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
      - "${ELASTICSEARCH_TRANSPORT_PORT:-9300}:9300"
    healthcheck:
      test:
        - CMD-SHELL
        - |
          if [ "${ELASTICSEARCH_SECURITY_ENABLED:-false}" = "true" ]; then
            curl -u elastic:${ELASTICSEARCH_PASSWORD} -f -s http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=1s > /dev/null
          else
            curl -f -s http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=1s > /dev/null
          fi
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    networks:
      - common_network